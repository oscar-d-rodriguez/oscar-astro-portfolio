---
import { ClientRouter } from "astro:transitions";
import Navigation from "@components/Navigation/Navigation";
import "./layout.css";
const { hideMenu } = Astro.props;
---

<!doctype html>
<html lang="en">
   <head>
      <!-- Google tag (gtag.js) -->
      <script
         async
         src="https://www.googletagmanager.com/gtag/js?id=G-BBVY7R3J09"
      ></script>
      <script>
         window.dataLayer = window.dataLayer || [];
         function gtag() {
            dataLayer.push(arguments);
         }
         gtag("js", new Date());
         gtag("config", "G-BBVY7R3J09");
      </script>
      <meta charset="UTF-8" />
      <meta name="viewport" content="width=device-width" />
      <meta name="viewport" content="width=device-width, initial-scale=1" />
      <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
      <link rel="preconnect" href="https://fonts.googleapis.com" />
      <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
      <link
         href="https://fonts.googleapis.com/css2?family=Mulish:ital,wght@0,200..1000;1,200..1000&display=swap"
         rel="stylesheet"
      />
      <meta name="generator" content={Astro.generator} />
      <title>Oscar Castaneda - Portfolio</title>
      <meta
         name="description"
         content="Explore the front-end portfolio of Oscar Castañeda – expert in React, UX design, performance optimization, and scalable web architecture. See real-world projects and innovative UI solutions."
      />
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      <meta charset="UTF-8" />

      <meta
         property="og:title"
         content="Oscar Castañeda | Front-End Engineer Portfolio"
      />
      <meta
         property="og:description"
         content="Explore the front-end portfolio of Oscar Castañeda – expert in React, UX design, performance optimization, and scalable web architecture."
      />
      <meta property="og:url" content="https://oscarshowcase.com" />
      <meta property="og:type" content="website" />
      <meta
         property="og:image"
         content="https://ocportfolio-images.s3.us-west-2.amazonaws.com/background-images/geometry_6.jpg"
      />
      <!-- Replace with actual image -->

      <ClientRouter />
      <script src="/script.js" is:inline></script>
   </head>
   <body>
      <div class="layout">
         {!hideMenu ? <Navigation client:load /> : null}
         <slot />
      </div>
      <div id="cursor" class="cursor-effect"></div>
      <canvas id="canvas" width="100%"></canvas>
      <script>
         import { set } from "astro:schema";

         (function () {
            const IFRAME_ID =
               new URL(location.href).searchParams.get("iframeId") ||
               "iframe-unknown";

            function computeHeight() {
               const doc = document.documentElement;
               const body = document.body;

               return Math.max(
                  body.scrollHeight,
                  body.offsetHeight,
                  doc.clientHeight,
                  doc.scrollHeight,
                  doc.offsetHeight,
               );
            }

            function post(h) {
               window.parent.postMessage(
                  { type: "iframe-height", iframeId: IFRAME_ID, height: h },
                  "*", // replace with exact origin in production
               );
            }

            // send until stable: send up to maxTries times or until value repeats stableCount times
            function sendUntilStable() {
               let last = -1;
               let stable = 0;
               const stableNeeded = 3;
               const maxTries = 12;
               let tries = 0;

               const tick = () => {
                  const h = computeHeight();
                  post(h);

                  if (h === last) {
                     stable++;
                  } else {
                     stable = 0;
                  }
                  last = h;
                  tries++;

                  if (stable >= stableNeeded || tries >= maxTries) {
                     // stop
                     return;
                  }
                  // schedule next check after next frame + small timeout to catch images/fonts
                  requestAnimationFrame(() => setTimeout(tick, 120));
               };

               tick();
            }

            function sendOnLoadSettled() {
               requestAnimationFrame(() => {
                  // immediate send + a delayed send to catch late content
                  sendUntilStable();
                  setTimeout(sendUntilStable, 350);
               });
            }

            // Observers for dynamic changes
            const ro = new ResizeObserver(() => post(computeHeight()));
            ro.observe(document.body);

            const mo = new MutationObserver(() => post(computeHeight()));
            mo.observe(document.body, { childList: true, subtree: true });

            window.addEventListener("load", () => {
               setTimeout(sendOnLoadSettled, 500);
            });
            window.addEventListener("resize", () => post(computeHeight()));

            // If script injected after load, still trigger a measurement
            if (
               document.readyState === "complete" ||
               document.readyState === "interactive"
            ) {
               sendOnLoadSettled();
            }

            // Debugging helper (comment out in production)
            setInterval(
               () => console.log("[iframe] height", computeHeight()),
               1000,
            );
         })();
      </script>
   </body>
</html>
